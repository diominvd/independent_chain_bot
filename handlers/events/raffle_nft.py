import asyncio

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from config import database, bot
from handlers.events import event_router
from keyboards.inline.event_kb import event_kb
from states import BotStates, EventsStates
from utils.translator import translate


@event_router.callback_query(StateFilter(BotStates.events_menu), F.data == "raffle_nft")
@database.update_activity
async def raffle_nft__callback(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "event_description": {
            "ru": f"–ö–æ–Ω–∫—É—Ä—Å –≤ —á–µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT –æ—Ç Independent Chain üíé\n\n"
                  f"–í—Å–µ–≥–æ –±—É–¥–µ—Ç 5 –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç:\n\n"
                  f"1Ô∏è‚É£ –ú–µ—Å—Ç–æ - 1000 $tINCH\n"
                  f"2Ô∏è‚É£ –ú–µ—Å—Ç–æ - –°–µ—Ä–µ–±—Ä—è–Ω–Ω–∞—è NFT\n"
                  f"3Ô∏è‚É£ –ú–µ—Å—Ç–æ - –ó–æ–ª–æ—Ç–∞—è NFT\n"
                  f"4Ô∏è‚É£ –ú–µ—Å—Ç–æ - –ë—Ä–æ–Ω–∑–æ–≤–∞—è NFT\n"
                  f"5Ô∏è‚É£ –ú–µ—Å—Ç–æ - 500 $tINCH\n\n"
                  f"–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç) —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n\n"
                  f"–ú–µ—Å—Ç–∞ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏.",
            "en": f"Competition in honor of the launch of the first NFT collection from Independent Chain üíé\n\n"
                  f"There will be 5 prizes in total:\n\n"
                  f"1Ô∏è‚É£ Place - 1000 $tINCH\n"
                  f"2Ô∏è‚É£ Place - Silver NFT\n"
                  f"3Ô∏è‚É£ Place - Gold NFT\n"
                  f"4Ô∏è‚É£ Place - Bronze NFT\n"
                  f"5Ô∏è‚É£ Place - 500 $tINCH\n\n"
                  f"Several times a day, the bot will send an up-to-date rating (the first 5 places) with the number of invited friends.\n\n"
                  f"Places will be distributed based on the number of users you invited. We wish you good luck."
        }
    }

    await state.set_state(EventsStates.raffle_nft)
    await callback.answer(show_alert=False)
    await callback.message.edit_text(
        text=translate(callback, strings["event_description"]),
        reply_markup=event_kb(callback)
    )
    return None


async def timer() -> None:
    while True:
        await asyncio.sleep(21600)
        database.cursor.execute("""SELECT referals FROM nft_event ORDER BY referals DESC LIMIT 5""")
        rating: list = [i[0] for i in database.cursor.fetchall()]
        try:
            strings: dict[str, dict] = {
                "rating": {
                    "ru": f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è ‚ú®\n\n"
                          f"1Ô∏è‚É£ {rating[0]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
                          f"2Ô∏è‚É£ {rating[1]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
                          f"3Ô∏è‚É£ {rating[2]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
                          f"4Ô∏è‚É£ {rating[3]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
                          f"5Ô∏è‚É£ {rating[4]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö",
                    "en": f"Interim results of the event ‚ú®\n\n"
                          f"1Ô∏è‚É£ {rating[0]} invited\n"
                          f"2Ô∏è‚É£ {rating[1]} invited\n"
                          f"3Ô∏è‚É£ {rating[2]} invited\n"
                          f"4Ô∏è‚É£ {rating[3]} invited\n"
                          f"5Ô∏è‚É£ {rating[4]} invited"
                }
            }
        except:
            strings: dict[str, dict] = {
                "rating": {
                    "ru": "–†–µ–π—Ç–∏–Ω–≥ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.",
                    "en": "The rating has not been formed yet."
                }
            }

        users: list = [i for i in database.get_all_user_id()]
        for user in users:
            language: str = database.get_user_language(user_id=user)
            try:
                await bot.send_message(
                    chat_id=user,
                    text=strings["rating"][language],
                )
            except:
                pass