from aiogram import F
from aiogram.types import CallbackQuery

from modules.main import MainModule
from core.config import users_table
from translator import Translator


@MainModule.router.callback_query(F.data == "wallet")
async def wallet(callback: CallbackQuery) -> None:
    strings: dict[str, dict] = {
        "information": {
            "ru": "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ Ton Space —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ üîó",
            "en": "Connect your Ton Space wallet using a special button üîó"
        },
        "success": {
            "ru": "–ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!",
            "en": "The wallet has been successfully connected!"
        },
        "failed": {
            "ru": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã—à–ª–æ.",
            "en": "The connection timeout has expired."
        }
    }

    # Stop alert:
    await callback.answer(show_alert=False)

    # Generate link for Ton Space connect.
    connector, connect_url = MainModule.modules["wallet"].generate_wallet_connect_url()

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "information"),
        reply_markup=MainModule.modules["wallet"].keyboard_connect(callback, connect_url))

    # Start connect timer.
    connect_result: str | bool = MainModule.modules["wallet"].connect_wallet_timer(connector, 600)
    if connect_result:
        wallet_address: str = connect_result
        users_table.update_wallet(callback.from_user.id, wallet_address)

        await callback.message.edit_text(
            text=Translator.text(callback, strings, "success"),
            reply_markup=MainModule.modules["wallet"].keyboard_finish(callback))
    else:
        await callback.message.edit_text(
            text=Translator.text(callback, strings, "failed"),
            reply_markup=MainModule.modules["wallet"].keyboard_finish(callback))
    return None