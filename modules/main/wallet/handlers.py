from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from core.config import bot
from database import t_users
from modules.main import MainModule
from states import WalletStates
from utils import Markdown as md, Translator


import asyncio
from tonsdk.utils import Address

from pytonconnect import TonConnect
from pytonconnect.storage import FileStorage
from pytonconnect.exceptions import TonConnectError


async def generate_url():
    connector = TonConnect(
        manifest_url='https://raw.githubusercontent.com/XaBbl4/pytonconnect/main/pytonconnect-manifest.json')
    wallets: list = connector.get_wallets()
    connect_url = await connector.connect(wallets[0])
    return connector, connect_url


async def connect(connector, user_id: int):
    connected = await connector.wait_for_connection()

    for i in range(300):
        await asyncio.sleep(1)
        if connected:
            if connector.connected and connector.account.address:
                wallet: str = Address(connector.account.address).to_string(is_user_friendly=True,  is_url_safe=True, is_bounceable=False)
                t_users.assign("wallet", wallet, "user_id", user_id)
                await connector.disconnect()
                return None


@MainModule.router.callback_query(F.data == "wallet")
async def h_wallet(callback: CallbackQuery, state: FSMContext) -> None:

    address: str = t_users.select(("wallet",), "user_id", callback.from_user.id)

    strings: dict[str, dict] = {
        "linked": {
            "ru": (f"–ö –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ—à–µ–ª—ë–∫ {md.bold('Ton Space')}:\n"
                   f"\n"
                   f"{md.monospaced(f'{address}')}\n"
                   f"\n"
                   f"–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥—Ä–µ—Å."),
            "en": (f"Your {md.bold('Ton Space')} wallet is already linked to your profile:\n"
                   f"\n"
                   f"{md.monospaced(f'{address}')}\n"
                   f"\n"
                   f"To link a new wallet, send its address.")
        },
        "not linked": {
            "ru": (f"–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {md.bold('Ton Space')} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥—Ä–µ—Å.\n"
                   f"\n"
                   f"–û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ {md.bold('Ton Space')} –∫–æ—à–µ–ª—å–∫–æ–≤ ‚ö†Ô∏è"),
            "en": (f"To link a {md.bold('Ton Space')} wallet send its address.\n"
                   f"\n"
                   f"Please note that the bot only supports {md.bold('Ton Space')} wallets addresses ‚ö†Ô∏è")
        }
    }

    await callback.answer(show_alert=False)

    connector, url = await generate_url()


    await callback.message.edit_text(
        text=Translator.text(callback, strings, "not linked"),
        reply_markup=MainModule.modules["wallet"].keyboard_connect(callback, url),
        disable_web_page_preview=True
    )

    await connect(connector, callback.from_user.id)


def unique(address: str) -> bool:
    if t_users.select(("wallet",), "wallet", address) is None:
        return True
    else:
        return False


@MainModule.router.message(StateFilter(WalletStates.address))
async def h_address(message: Message, state: FSMContext) -> None:

    address: str = message.text

    strings: dict[str, dict] = {
        "error": {
            "ru": (f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üö´\n"
                   f"\n"
                   f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 48 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                   f"\n"
                   f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥—Ä–µ—Å–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."),
            "en": (f"Incorrect wallet address üö´\n"
                   f"\n"
                   f"The wallet address must consist of 48 characters.\n"
                   f"\n"
                   f"Check that the address meets the specified requirements and try again.")
        },
        "not unique": {
            "ru": (f"–î–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é üö´\n"
                   f"\n"
                   f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."),
            "en": (f"This wallet address is already linked to another profile üö´\n"
                   f"\n"
                   f"Select a different address and try again.")
        },
        "success": {
            "ru": f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é ‚úÖ",
            "en": f"The wallet address has been successfully linked to your profile ‚úÖ"
        }
    }

    state_data: dict = await state.get_data()

    if unique(address) is True:
        if len(address) != 48:
            try:
                await bot.edit_message_text(
                    chat_id=message.from_user.id,
                    message_id=state_data["anchor"],
                    text=Translator.text(message, strings, "error"),
                    reply_markup=MainModule.modules["wallet"].keyboard(message, "cancel")
                )
            except:
                pass
        else:
            await state.clear()

            t_users.assign("wallet", address, "user_id", message.from_user.id)

            await bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=state_data["anchor"],
                text=Translator.text(message, strings, "success"),
                reply_markup=MainModule.modules["wallet"].keyboard(message, "back")
            )
    else:
        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=state_data["anchor"],
            text=Translator.text(message, strings, "not unique"),
            reply_markup=MainModule.modules["wallet"].keyboard(message, "back")
        )

    await bot.delete_message(
        chat_id=message.from_user.id,
        message_id=message.message_id
    )