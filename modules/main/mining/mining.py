from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from core.config import mining_table, users_table
from markdown import Markdown
from modules.main import MainModule
from translator import Translator


@MainModule.router.callback_query(F.data == "mining")
@users_table.update_last_activity
async def mining(callback: CallbackQuery, state: FSMContext) -> None:
    # Check the wallet binding.
    if await MainModule.modules["mining"].check_wallet_bind(callback) is False:
        return None

    # Stop alert.
    await callback.answer(show_alert=False)

    # Check user existence in mining table.
    if not mining_table.check_user(callback.from_user.id):
        mining_table.create_user(callback.from_user.id)

    user_data: list = mining_table.get_user(callback.from_user.id)
    strings: dict[str, dict] = {
        "mining": {
            "ru": (f"–î–æ–±—ã—á–∞ {Markdown.bold('$tINCH')} –æ—Ç–∫—Ä—ã—Ç–∞ üî•\n\n"
                   f"–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ - 4 —á–∞—Å–∞. –ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –¥–æ–±—ã—á—É –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. "
                   f"–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —É –≤–∞—Å –±—É–¥–µ—Ç 2 —á–∞—Å–∞, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å $tINCH. "
                   f"–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω–∞.\n\n"
                   f"{Markdown.bold('–í–∏–¥—ã —É—Å–∏–ª–∏—Ç–µ–ª–µ–π')}:\n"
                   f"ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π - x1.1\n"
                   f"ü•à –°–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π - x1.2\n"
                   f"ü•á –ó–æ–ª–æ—Ç–æ–π - x1.3\n"
                   f"üíé –û—Å–æ–±–µ–Ω–Ω—ã–µ\n\n"
                   f"–ö—É–ø–ª–µ–Ω–Ω—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ {Markdown.monospaced('Ton Space')}. "
                   f"–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å–∏–ª–∏—Ç–µ–ª–µ–π –∑–Ω–∞—á–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –ø–µ—Ä–µ–º–Ω–æ–∂–∞—é—Ç—Å—è.\n\n"
                   f"{Markdown.bold('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')} üìä\n"
                   f"{Markdown.bold('–£—Å–∏–ª–∏—Ç–µ–ª—å')}: x{round(user_data[0]*mining_table.global_booster, 4)}\n"
                   f"{Markdown.bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–æ–≤')}: {user_data[1]}\n"
                   f"{Markdown.bold('–í–∞—à–∞ –¥–æ–±—ã—á–∞')}: {round(user_data[2], 4)} $tINCH\n\n"),
            "en": (f"Mining {Markdown.bold('$tINCH')} is open üî•\n\n"
                   f"The storage time is 4 hours. To collect the loot, click the appropriate button. "
                   f" After filling the vault, you will have 2 hours to collect $tINCH. "
                   f" Otherwise, the loot will be lost.\n\n"
                   f"{Markdown.bold('Types of amplifiers')}:\n"
                   f"ü•â Bronze - x1.1\n"
                   f"ü•à Silver - 1.2\n"
                   f"ü•á Gold - x1.3\n"
                   f"üíé Special\n\n"
                   f"The purchased amplifiers must be stored on the {Markdown.monospaced('Ton Space')} wallet. "
                   f"If there are several amplifiers, the multiplier values are multiplied.\n\n"
                   f"{Markdown.bold('Your stats')} üìä\n"
                   f"{Markdown.bold('Booster')}: x{round(user_data[0]*mining_table.global_booster, 4)}\n"
                   f"{Markdown.bold('Number of fees')}: {user_data[1]}\n"
                   f"{Markdown.bold('Your loot')}: {round(user_data[2], 4)} $tINCH")
        }
    }

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "mining"),
        reply_markup=MainModule.modules["mining"].keyboard(callback))
    return None