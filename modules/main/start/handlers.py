import datetime

from aiogram import F
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.config import bot
from database import t_users
from modules.main import MainModule
from utils import Markdown as md, Translator


async def check_subscribe(user_id: int) -> bool:
    status = await bot.get_chat_member(chat_id="@inch_ton", user_id=user_id)
    if status.status != ChatMemberStatus.LEFT:
        return True
    else:
        return False


def language(language_code: str) -> str:
    if language_code not in ["ru", "en"]:
        return "en"
    else:
        return language_code


def inviter(message: Message) -> int | None:
    text: list = message.text.split(" ")
    if len(text) == 2:
        inviter_id: int = int(text[1])
        return inviter_id
    else:
        return None


@MainModule.router.message(F.chat.type == ChatType.PRIVATE, Command("start"))
async def h_start(message: Message, state: FSMContext) -> None:

    strings: dict[str, dict] = {
        "greeting": {
            "ru": (
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {md.bold('Independent Chain')} - –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –≥—Ä—É–ø–ø–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤.\n"
                f"\n"
                f"–ù–∞—à–∞ —Ü–µ–ª—å - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é –æ—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö "
                f"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç—å —Å –≤–Ω—É—Ç—Ä–µ—Å–µ—Ç–µ–≤–æ–π –º–æ–Ω–µ—Ç–æ–π.\n"
                f"\n"
                f"–£–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Telegram –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–æ –æ—Ç—á–µ–∫–∞–Ω–µ–Ω–æ 10,000,000 "
                f"–∂–µ—Ç–æ–Ω–æ–≤ $INCH –≤ —Å–µ—Ç–∏ TON üî•\n"
                f"\n"
                f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {t_users.referal} $tINCH - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∞ –±–æ—Ç–∞. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–∞–∂–¥—ã–π "
                f"—Å–º–æ–∂–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –∂–µ—Ç–æ–Ω $INCH üîÑ\n"
                f"\n"
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /profile.\n"
                f"\n"
                f"{md.monospaced('–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.')}"),
            "en": (
                f"Welcome to {md.bold('Independent Chain')}, a crypto project launched by a group of enthusiasts.\n"
                f"\n"
                f"Our goal is to launch our own blockchain network with an intra-network coin, independent of commercial "
                f"organizations, sponsors and third-party organizations.\n"
                f"\n"
                f"An advertising campaign has already been launched on the Telegram platform, within the framework of which 10,000,000 "
                f"$INCH tokens were minted on the TON networküî•\n"
                f"\n"
                f"For each invited friend, you will receive {t_users.referal} $tINCH - the internal currency of the bot. In the future, everyone "
                f"will be able to convert his savings into a $INCH token üîÑ\n"
                f"\n"
                f"To view the profile, use the /profile command.\n"
                f"{md.monospaced('Before using the bot, we strongly recommend that you read the user agreement.')}")
        },
        "subscribe": {
            "ru": "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            "en": "Subscribe to the project channel to use the bot."
        }
    }

    await state.clear()

    if not await check_subscribe(message.from_user.id):
        await message.answer(
            text=Translator.text(message, strings, "subscribe"),
            reply_markup=MainModule.modules["start"].keyboard_subscribe(message)
        )
    else:
        # Check user existence in bot database.
        user = t_users.user(message.from_user.id)
        if user is None:
            t_users.insert(
                user_id=message.from_user.id,
                username=message.from_user.username,
                language=language(message.from_user.language_code),
                wallet="NULL",
                balance=t_users.start,
                referals=0,
                last_code=(datetime.datetime.now() - datetime.timedelta(days=1)),
            )

        inviter_id: int | None = inviter(message)
        if inviter_id is not None:
            if user is None:
                t_users.increase("referals", 1, "user_id", inviter_id)
                t_users.increase("balance", t_users.referal, "user_id", inviter_id)

        await message.answer(
            text=Translator.text(message, strings, "greeting"),
            reply_markup=MainModule.modules["start"].keyboard(message)
        )


@MainModule.router.callback_query(F.data == "check_subscribe")
async def h_subscribe(callback: CallbackQuery, state: FSMContext) -> None:

    strings: dict[str, dict] = {
        "success": {
            "ru": ("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n"
                   "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ‚Üí /start"),
            "en": ("Subscription is confirmed ‚úÖ\n"
                   "Use command ‚Üí /start")
        },
        "fail": {
            "ru": "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª üö´",
            "en": "You are not subscribed to the channel üö´"
        }
    }

    if await check_subscribe(callback.from_user.id):
        await callback.message.edit_text(
            text=Translator.text(callback, strings, "success")
        )
    else:
        await callback.answer(
            text=Translator.text(callback, strings, "fail"),
            show_alert=True
        )