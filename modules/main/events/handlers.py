from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from core.config import users_table
from markdown import Markdown
from modules import MainModuleStates
from modules.main import MainModule
from translator import Translator


@MainModule.router.callback_query(F.data == "events")
@users_table.update_last_activity
async def support(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "events": {
            "ru": (f"–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ü•≥\n\n"
                   f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
                   f"{Markdown.bold('–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è')}:\n"
                   f"‚Ä¢ –°–ª–æ—Ç—ã - –∏—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π $tINCH."),
            "en": (f"This section contains current events and activities ü•≥\n\n"
                   f"To view a specific event, select the appropriate button.\n\n"
                   f"{Markdown.bold('Current Events')}:\n"
                   f"‚Ä¢ Slots - try your luck and earn $tINCH.")
        }
    }

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "events"),
        reply_markup=MainModule.modules["events"].keyboard(callback))
    return None


# Slots -> ...
@MainModule.router.callback_query(F.data == "slots")
@users_table.update_last_activity
async def slots(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "slots": {
            "ru": (f"{Markdown.bold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ—Ç—ã')} üé∞\n\n"
                   f"{Markdown.bold('–°—Ç–∞–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')}: 10 $tINCH\n\n"
                   f"–í —Å–ª—É—á–∞–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ç—Ä—ë—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–π–≥—Ä—ã—à –≤ —Ä–∞–∑–º–µ—Ä–µ x15 –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.\n\n"
                   f"–ï—Å–ª–∏ –Ω–∞ —Å–ª–æ—Ç–∞—Ö –≤—ã–ø–∞–¥–µ—Ç —Ç—Ä–∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ - –≤–∞—à –≤—ã–π–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏—Ç —Ö20 –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ü§ë"),
            "en": (f"{Markdown.bold('Welcome to Slots')} üé∞\n\n"
                   f"{Markdown.bold('Default bet')}: 10$tINCH\n\n"
                   f" If three identical slots fall out, you get a win of x15 of the initial bet.\n\n"
                   f" If three brilliants appear on the slots - you winnings will be to x20 of the initial bet ü§ë")
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(MainModuleStates.slots)

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "slots"),
        reply_markup=MainModule.modules["events"].keyboard_slots(callback)
    )


@MainModule.router.callback_query(F.data == "spin")
@users_table.update_last_activity
async def spin(callback: CallbackQuery, state: FSMContext) -> None:
    if users_table.get_value("balance", "user_id", callback.from_user.id) > 10:
        users_table.update_balance(callback.from_user.id, "-", 10)

        result, reward = MainModule.modules["events"].spin()

        strings: dict[str, dict] = {
            "win_alert": {
                "ru": (f"{result}\n\n"
                       f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {reward} $tINCH."),
                "en": (f"{result}\n\n"
                       f"Congratulations! You have won {reward} $tINCH."),
            },
            "lose_alert": {
                "ru": (f"{result}\n\n"
                       "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 $tINCH. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"),
                "en": (f"{result}\n\n"
                       "You've lost 10 $tINCH. Try again!")
            }
        }

        if reward == 0:
            await callback.answer(
                text=Translator.text(callback, strings, "lose_alert"),
                show_alert=True)
        else:
            users_table.update_balance(callback.from_user.id, "+", reward)
            await callback.answer(
                text=Translator.text(callback, strings, "win_alert"),
                show_alert=True)
        return None

    else:
        strings: dict[str, dict] = {
            "alert": {
                "ru": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $tINCH –¥–ª—è –∏–≥—Ä—ã.",
                "en": "Not enough $tINCH to play."
            }
        }

        await callback.answer(
            text=Translator.text(callback, strings, "alert"),
            show_alert=True)
        return None
