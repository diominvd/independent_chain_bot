import asyncio
import datetime

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from core.config import users_table, bot, codes_table
from markdown import Markdown
from modules import MainModuleStates
from modules.main import MainModule
from translator import Translator


@MainModule.router.callback_query(F.data == "events")
@users_table.update_last_activity
async def events(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "events": {
            "ru": (f"–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ü•≥\n\n"
                   f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n\n"
                   f"{Markdown.bold('–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è')}:\n"
                   f"‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã - –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É.\n"
                   f"‚Ä¢ –°–ª–æ—Ç—ã - –∏—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π $tINCH."),
            "en": (f"This section contains current events and activities ü•≥\n\n"
                   f"To view a specific event, select the appropriate button.\n\n"
                   f"{Markdown.bold('Current Events')}:\n"
                   f"‚Ä¢ Promo codes - activate the promo code and receive a reward.\n"
                   f"‚Ä¢ Slots - try your luck and earn $tINCH.")
        }
    }

    await callback.answer(show_alert=False)
    await state.update_data(data={"events_message": callback.message.message_id})

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "events"),
        reply_markup=MainModule.modules["events"].keyboard(callback))
    return None


# Promo codes -> ...
@MainModule.router.callback_query(F.data == "codes")
@users_table.update_last_activity
async def codes(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "codes": {
            "ru": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 16-—Ç–∏ –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ üî†",
            "en": "Send a 16-digit code to activate it üî†"
        },
        "limit": {
            "ru": "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤ —Å—É—Ç–∫–∏.",
            "en": "Only one activation per day is available."
        }
    }

    current_time: datetime = datetime.datetime.now()
    last_activate_time: datetime = users_table.get_last_activate(callback.from_user.id)[0]
    # 86401 - –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥—ã.
    time_difference: datetime = 86401 if last_activate_time is None else (current_time - last_activate_time).total_seconds()

    # Check last activate time.
    if time_difference > 86400:
        await callback.answer(show_alert=False)
        await state.set_state(MainModuleStates.codes)

        await callback.message.edit_text(
            text=Translator.text(callback, strings, "codes"),
            reply_markup=MainModule.modules["events"].keyboard_back(callback, "events"))
        return None
    else:
        await callback.answer(
            text=Translator.text(callback, strings, "limit"),
            show_alert=True)
        return None


@MainModule.router.message(StateFilter(MainModuleStates.codes))
@users_table.update_last_activity
async def code_handler(message: Message, state: FSMContext) -> None:
    await bot.delete_message(
        chat_id=message.from_user.id,
        message_id=message.message_id)

    code: list = codes_table.load_code(message.text)

    if len(code) != 0:
        strings: dict[str, dict] = {
            "success": {
                "ru": (f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n"
                       f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {code[0][2]} $tINCH."),
                "en": (f"Promo code successfully activated ‚úÖ\n"
                       f"You are credited with {code[0][2]} $tINCH.")
            }
        }

        data: dict = await state.get_data()
        await state.clear()

        users_table.activate_code(message.from_user.id, code[0][2])
        codes_table.delete_code(code[0][1])

        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=data["events_message"],
            text=Translator.text(message, strings, "success"),
            reply_markup=MainModule.modules["events"].keyboard_close(message, "events"))
    else:
        strings: dict[str, dict] = {
            "fail": {
                "ru": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ üö´\n",
                "en": "Invalid promo code üö´\n",
            }
        }

        await message.answer(
            text=Translator.text(message, strings, "fail"))

        await asyncio.sleep(3)

        await bot.delete_message(
            chat_id=message.from_user.id,
            message_id=message.message_id+1)
    return None


# Slots -> ...
@MainModule.router.callback_query(F.data == "slots")
@users_table.update_last_activity
async def slots(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "slots": {
            "ru": (f"{Markdown.bold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ—Ç—ã')} üé∞\n\n"
                   f"{Markdown.bold('–°—Ç–∞–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')}: 10 $tINCH\n\n"
                   f"–í —Å–ª—É—á–∞–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ç—Ä—ë—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–π–≥—Ä—ã—à –≤ —Ä–∞–∑–º–µ—Ä–µ x15 –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.\n\n"
                   f"–ï—Å–ª–∏ –Ω–∞ —Å–ª–æ—Ç–∞—Ö –≤—ã–ø–∞–¥–µ—Ç —Ç—Ä–∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ - –≤–∞—à –≤—ã–π–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏—Ç —Ö20 –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ü§ë"),
            "en": (f"{Markdown.bold('Welcome to Slots')} üé∞\n\n"
                   f"{Markdown.bold('Default bet')}: 10$tINCH\n\n"
                   f" If three identical slots fall out, you get a win of x15 of the initial bet.\n\n"
                   f" If three brilliants appear on the slots - you winnings will be to x20 of the initial bet ü§ë")
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(MainModuleStates.slots)

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "slots"),
        reply_markup=MainModule.modules["events"].keyboard_slots(callback))
    return None


@MainModule.router.callback_query(F.data == "spin")
@users_table.update_last_activity
async def spin(callback: CallbackQuery, state: FSMContext) -> None:
    if users_table.get_value("balance", "user_id", callback.from_user.id) > 10:
        users_table.update_balance(callback.from_user.id, "-", 10)

        result, reward = MainModule.modules["events"].spin()

        strings: dict[str, dict] = {
            "win_alert": {
                "ru": (f"{result}\n\n"
                       f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ {reward} $tINCH."),
                "en": (f"{result}\n\n"
                       f"Congratulations! You have won {reward} $tINCH."),
            },
            "lose_alert": {
                "ru": (f"{result}\n\n"
                       "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 10 $tINCH. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"),
                "en": (f"{result}\n\n"
                       "You've lost 10 $tINCH. Try again!")
            }
        }

        if reward == 0:
            await callback.answer(
                text=Translator.text(callback, strings, "lose_alert"),
                show_alert=True)
        else:
            users_table.update_balance(callback.from_user.id, "+", reward)
            await callback.answer(
                text=Translator.text(callback, strings, "win_alert"),
                show_alert=True)
        return None

    else:
        strings: dict[str, dict] = {
            "alert": {
                "ru": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ $tINCH –¥–ª—è –∏–≥—Ä—ã.",
                "en": "Not enough $tINCH to play."
            }
        }

        await callback.answer(
            text=Translator.text(callback, strings, "alert"),
            show_alert=True)
        return None
