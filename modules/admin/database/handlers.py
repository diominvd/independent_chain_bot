from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from core.config import users_table, mining_table, bot
from markdown import Markdown
from modules import AdminModuleStates
from modules.admin import AdminModule
from translator import Translator


@AdminModule.router.callback_query(F.data == "database")
async def database(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "description": {
            "ru": f"{Markdown.bold('–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π')}:\n"
                  f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞.\n"
                  f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                  f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞.",
            "en": f"{Markdown.bold('List of functions')}:\n"
                  f"‚Ä¢ Statistics - view the statistics of the bot.\n"
                  f"‚Ä¢ Get a value - query the database.\n"
                  f"‚Ä¢ Change value - change the internal value of the bot."
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(AdminModuleStates.database)

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "description"),
        reply_markup=AdminModule.modules["database"].keyboard(callback))
    return None


# Statistics ->...
@AdminModule.router.callback_query(StateFilter(AdminModuleStates.database), F.data == "statistics")
async def database(callback: CallbackQuery, state: FSMContext) -> None:
    query: str = "SELECT COUNT(user_id) FROM users"
    users: int = users_table.select(query, ())[0][0]

    query: str = "SELECT COUNT(user_id) FROM mining"
    miners: int = mining_table.select(query, ())[0][0]

    query: str = "SELECT SUM(balance) FROM users"
    balances: float = round(users_table.select(query, ())[0][0], 4)

    strings: dict[str, dict] = {
        "statistics": {
            "ru": f"{Markdown.bold('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Independent Chain Bot')} üìä\n\n"
                  f"{Markdown.bold('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}: {users}\n"
                  f"{Markdown.bold('–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤')}: {miners}\n"
                  f"{Markdown.bold('–î–æ–±—ã—Ç–æ –º–æ–Ω–µ—Ç')}: {balances}\n",
            "en": f"{Markdown.bold('Independent Chain Bot statistics')} üìä\n\n"
                  f"{Markdown.bold('Total users')}: {users}\n"
                  f"{Markdown.bold('Total miners')}: {miners}\n"
                  f"{Markdown.bold('Coins mined')}: {balances}\n",
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(AdminModuleStates.statistics)

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "statistics"),
        reply_markup=AdminModule.modules["database"].keyboard_back(callback, "database"))
    return None


# Get Values -> ...
@AdminModule.router.callback_query(StateFilter(AdminModuleStates.database, AdminModuleStates.get_values),
                                   F.data == "get_values")
async def get_values(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "information": {
            "ru": (f"{Markdown.bold('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π')} üóÇ\n\n"
                   f"‚Ä¢ users - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                   f"-- registration\n"
                   f"-- last_activity\n"
                   f"-- language\n"
                   f"-- project_id\n"
                   f"-- user_id\n"
                   f"-- user_id\n"
                   f"-- inviter_id\n"
                   f"-- username\n"
                   f"-- balance\n"
                   f"-- referals\n\n"
                   f"‚Ä¢ mining - –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞–π–Ω–µ—Ä–æ–≤.\n"
                   f"-- user_id\n"
                   f"-- last_claim\n"
                   f"-- booster\n"
                   f"-- claims\n"
                   f"-- amount\n\n"
                   f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É:\n\n"
                   f"{Markdown.monospaced('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:–ø–∞—Ä–∞–º–µ—Ç—Ä:–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:–∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:—Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è (str, int, float)')}"),
            "en": (f"{Markdown.bold('List of available tables and fields')} üóÇ\n\n"
                   f"‚Ä¢ users - The main table with user data.\n"
                   f"-- registration\n"
                   f"-- last_activity\n"
                   f"-- language\n"
                   f"-- project_id\n"
                   f"-- user_id\n"
                   f"-- user_id\n"
                   f"-- inviter_id\n"
                   f"-- username\n"
                   f"-- balance\n"
                   f"-- referals\n\n"
                   f"‚Ä¢ mining - A table with miner data.\n"
                   f"-- user_id\n"
                   f"-- last_claim\n"
                   f"-- booster\n"
                   f"-- claims\n"
                   f"-- amount\n\n"
                   f"To get the value, send the completed template according to this example:\n\n"
                   f"{Markdown.monospaced('table name:parameter:name of the filter:filter value:value type (str, int, float)')}")
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(AdminModuleStates.get_values)

    await callback.message.edit_text(
        text=Translator.text(callback, strings, "information"),
        reply_markup=AdminModule.modules["database"].keyboard_back(callback, "database"))
    return None


@AdminModule.router.message(StateFilter(AdminModuleStates.get_values))
async def get_values_handler(message: Message, state: FSMContext) -> None:
    content: list = message.text.split(":")
    value: any = AdminModule.modules["database"].get_value(content)

    strings: dict[str, dict] = {
        "response": {
            "ru": (f"{Markdown.bold('–û—Ç—á—ë—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É')} üì•\n\n"
                   f"{Markdown.bold('–¢–∞–±–ª–∏—Ü–∞')}: {content[0]}\n"
                   f"{Markdown.bold('–ü–∞—Ä–∞–º–µ—Ç—Ä')}: {content[1]}\n"
                   f"{Markdown.bold('–§–∏–ª—å—Ç—Ä')}: {content[2]}\n"
                   f"{Markdown.bold('–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞')}: {content[3]}\n"
                   f"{Markdown.bold('–û—Ç–≤–µ—Ç')}: {value}"),
            "en": (f"{Markdown.bold('Report on request')} üì•\n\n"
                   f"{Markdown.bold('Table')}: {content[0]}\n"
                   f"{Markdown.bold('Parameter')}: {content[1]}\n"
                   f"{Markdown.bold('Filter')}: {content[2]}\n"
                   f"{Markdown.bold('Filter value')}: {content[3]}\n"
                   f"{Markdown.bold('Response')}: {value}"),
        }
    }

    await bot.delete_message(
        chat_id=message.from_user.id,
        message_id=message.message_id)

    data: dict = await state.get_data()
    panel_id: int = data["panel_id"]

    await bot.edit_message_text(
        text=Translator.text(message, strings, "response"),
        chat_id=message.from_user.id,
        message_id=panel_id,
        reply_markup=AdminModule.modules["database"].keyboard_close(message, "get_values"))
    return None


# Change Values ->...
@AdminModule.router.callback_query(StateFilter(AdminModuleStates.database, AdminModuleStates.change_values),
                                   F.data == "change_values")
async def change_values(callback: CallbackQuery, state: FSMContext) -> None:
    strings: dict[str, dict] = {
        "information": {
            "ru": (f"{Markdown.bold('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π')} üî¢\n\n"
                   f"‚Ä¢ start_reward ({users_table.start_reward}) - –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ.\n"
                   f"‚Ä¢ referal_reward ({users_table.referal_reward}) - –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                   f"‚Ä¢ global_booster ({mining_table.global_booster}) - –û–±—â–∏–π —É—Å–∏–ª–∏—Ç–µ–ª—å –¥–æ–±—ã—á–∏.\n\n"
                   f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É:\n"
                   f"{Markdown.monospaced('–Ω–∞–∑–≤–∞–Ω–∏–µ=–∑–Ω–∞—á–µ–Ω–∏–µ')}"),
            "en": (f"{Markdown.bold('List of available values')} üî¢\n\n"
                   f"‚Ä¢ start_reward - Reward for registering in the bot.\n"
                   f"‚Ä¢ referal_reward - Reward for the invited user.\n"
                   f"‚Ä¢ global_booster is a general mining booster.\n\n"
                   f"To change the value, send the completed template according to this example:\n"
                   f"{Markdown.monospaced('name=value')}")
        }
    }

    await callback.answer(show_alert=False)
    await state.set_state(AdminModuleStates.change_values)

    try:
        await callback.message.edit_text(
            text=Translator.text(callback, strings, "information"),
            reply_markup=AdminModule.modules["database"].keyboard_back(callback, "database"))
    except Exception as e:
        print(e)
    return None


@AdminModule.router.message(StateFilter(AdminModuleStates.change_values))
async def change_values_handler(message: Message, state: FSMContext) -> None:
    content: list = message.text.split("=")
    name: str = content[0]
    value: float = float(content[1])

    AdminModule.modules["database"].change_value(name, value)

    strings: dict[str, dict] = {
        "response": {
            "ru": (f"{Markdown.bold('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ')} üì§\n\n"
                   f"{Markdown.bold('–ò–º—è –∑–Ω–∞—á–µ–Ω–∏—è')}: {name}\n"
                   f"{Markdown.bold('–ó–Ω–∞—á–µ–Ω–∏–µ')}: {value}\n\n"
                   f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: /admin"),
            "en": (f"{Markdown.bold('Value changed')} üì§\n\n"
                   f"{Markdown.bold('Value Name')}: {name}\n"
                   f"{Markdown.bold('Value')}: {value}\n\n"
                   f"Open the control panel: /admin")
        }
    }

    await bot.delete_message(
        chat_id=message.from_user.id,
        message_id=message.message_id)

    data: dict = await state.get_data()
    panel_id: int = data["panel_id"]

    await bot.edit_message_text(
        text=Translator.text(message, strings, "response"),
        chat_id=message.from_user.id,
        message_id=panel_id,
        reply_markup=AdminModule.modules["database"].keyboard_close(message, "change_values"))
    return None
